version: 0.5
# ====================================
# CBT (認知行動療法) 日記アプリ - 最小限シンプル版
# 複雑な式を避け、基本機能のみに特化
# ====================================

# ループ処理: ユーザーが「/終了」と入力するまで続行
loop:
  while: :continue

nodes:
  # ======== システム設定と状態管理 ========
  # continue: ループを継続するかどうかのフラグ
  continue:
    value: true  # 初期値はtrue（ループ継続）
    update: :checkExit.result  # ユーザーが/終了を入力したらfalseに更新
  
  # 固定カウンター（増加させない）
  entryCount:
    value: "記録中"  # 文字列として固定値を使用
  
  # messages: 会話履歴を保持するノード
  messages:
    value:
      - role: system
        content: |
          # CBTセラピストの役割定義
          あなたは認知行動療法（CBT）の専門家です。ユーザーの日記エントリーから以下を特定し、サポートします：
          1. 自動思考（ネガティブな考え方や認知の歪み）
          2. 認知の歪み（例：全か無か思考、心の読み過ぎ、破局的思考など）
          3. 感情と身体反応
          4. より合理的・バランスのとれた代替思考
          
          会話は親切で共感的に行い、批判せず、段階的なCBTプロセスを通じてユーザーをガイドしてください。
          
          分析結果は以下の形式で構造化してください：
          
          <自動思考>
          - ネガティブな考え1（強さ: 1-10）
          - ネガティブな考え2（強さ: 1-10）
          </自動思考>
          
          <認知の歪み>
          - 歪みの種類1（強さ: 1-10）
          - 歪みの種類2（強さ: 1-10）
          </認知の歪み>
          
          <感情と身体反応>
          - 感情1（強さ: 1-10）: 関連する身体反応
          - 感情2（強さ: 1-10）: 関連する身体反応
          </感情と身体反応>
          
          <代替思考>
          - より合理的な考え方1
          - より合理的な考え方2
          </代替思考>
          
          <行動提案>
          - 具体的な行動提案1
          - 具体的な行動提案2
          </行動提案>
    isResult: true  # このノードの最終値を結果として出力
  
  # ======== ユーザーインターフェースと制御 ========
  # アプリ起動時のウェルカムメッセージを表示
  welcomeMessage:
    agent: stringTemplateAgent
    console:
      after: true
    inputs:
      text: |
        === CBT日記アプリへようこそ ===
        日記を入力して、認知行動療法（CBT）のフレームワークで分析します。
        
        今日あった出来事と、それに対するあなたの考えや感情を自由に書いてください。
        終了するには「/終了」と入力してください。
        
        複数行を入力したい場合は、文章をあらかじめエディタで作成し、コピー＆ペーストしてください。
        
        注意: この版はメモリ内でのみ動作し、統計機能はありません。
  
  # ユーザーからの日記入力を受け取る
  userInput:
    agent: textInputAgent
    params:
      message: "日記エントリー："
      required: true
  
  # ユーザーが終了コマンドを入力したかチェック
  checkExit:
    agent: compareAgent
    inputs:
      array:
        - :userInput.text
        - "!="
        - /終了
  
  # ユーザーがバイアス表示コマンドを入力したかチェック
  isBiasCommand:
    agent: compareAgent
    inputs:
      array:
        - :userInput.text
        - "startsWith"
        - /バイアス
  
  # 入力が通常の日記かどうかをチェック（終了コマンドでもバイアスコマンドでもない）
  isNormalDiaryEntry:
    agent: stringTemplateAgent
    inputs:
      text: ${:checkExit.result && !:isBiasCommand.result}
  
  # ======== CBT分析処理 ========
  # LLMを使ってCBT分析を実行（シンプル版）
  cbtAnalysis:
    agent: openAIAgent
    params:
      model: gpt-4o
    inputs:
      prompt: |
        # CBT分析プロンプト
        以下の日記エントリーをCBTの観点から分析してください：
        
        ${:userInput.text}
        
        分析結果は以下の形式で構造化してください。各セクションをXMLタグで囲み、リスト形式で項目を挙げてください：
        
        <自動思考>
        - ネガティブな考え1（強さ: 1-10）
        - ネガティブな考え2（強さ: 1-10）
        </自動思考>
        
        <認知の歪み>
        - 歪みの種類1（強さ: 1-10）
        - 歪みの種類2（強さ: 1-10）
        </認知の歪み>
        
        <感情と身体反応>
        - 感情1（強さ: 1-10）: 関連する身体反応
        - 感情2（強さ: 1-10）: 関連する身体反応
        </感情と身体反応>
        
        <代替思考>
        - より合理的な考え方1
        - より合理的な考え方2
        </代替思考>
        
        <行動提案>
        - 具体的な行動提案1
        - 具体的な行動提案2
        </行動提案>
        
        その後、全体の分析結果について、共感的でサポーティブな言葉でユーザーに語りかけてください。批判せず、具体的なCBTテクニックを提案し、前向きな変化を促してください。
    if: :isNormalDiaryEntry.text
  
  # アスキーグラフの生成
  asciiGraphGeneration:
    agent: openAIAgent
    params:
      model: gpt-4o
    inputs:
      prompt: |
        # アスキーグラフ生成プロンプト
        
        以下のCBT分析結果をもとに、ユーザーの感情と認知の歪みの強度を数値化したアスキーグラフを作成してください：
        
        ${:cbtAnalysis.text}
        
        以下の条件を満たすグラフや表を生成してください：
        
        1. 分析された感情の強さ（1-10）を横棒グラフで表示（例: ■■■■■■■□□□ のように塗りつぶしと空白で表現）
        2. 認知の歪みの強さ（1-10）も同様に横棒グラフで表示
        3. 数値の大きさが一目でわかるよう、適切な目盛りやラベルを付ける
        4. 全体で15行程度のコンパクトなグラフにまとめる
        5. XMLタグ <asciiGraph> と </asciiGraph> で囲む
        
        シンプルかつ数値情報が明確に伝わるデザインにし、端末表示で崩れないようにしてください。グラフには簡潔なタイトルと説明を付けてください。
    if: :cbtAnalysis.text
  
  # 分析結果とアスキーグラフを表示（非常にシンプルに）
  outputAnalysis:
    agent: stringTemplateAgent
    console:
      after: true
    inputs:
      text: |
        ===== CBT分析結果 =====
        
        ${:cbtAnalysis.text}
        
        ===== 数値グラフ表示 =====
        ${:asciiGraphGeneration.text}
        =======================
    if: :cbtAnalysis.text
  
  # ======== バイアス情報表示機能 ========
  # バイアス説明生成
  biasExplanation:
    agent: openAIAgent
    params:
      model: gpt-4o
    inputs:
      prompt: |
        # 認知の歪み（バイアス）説明プロンプト
        
        ユーザーから以下のようなリクエストがありました：
        
        ${:userInput.text}
        
        これは「/バイアス」で始まるコマンドです。認知行動療法（CBT）における認知の歪み（バイアス）について情報提供してください。
        
        もし「/バイアス」の後に特定のバイアスの名前が指定されている場合（例：「/バイアス 全か無か思考」）、そのバイアスに関する詳細情報を提供してください。
        
        もし「/バイアス」のみの場合は、CBTで扱われる主な認知の歪みの概要リストを提供してください。
        
        説明には以下を含めてください：
        1. バイアスの簡潔な定義
        2. 一般的な例
        3. このバイアスに対処するための実用的なテクニック
        
        回答はユーザーが理解しやすいように、専門用語を避け、親しみやすい口調で説明してください。
    if: :isBiasCommand.result
  
  # バイアス説明を表示
  outputBiasExplanation:
    agent: stringTemplateAgent
    console:
      after: true
    inputs:
      text: |
        ===== 認知の歪み（バイアス）情報 =====
        
        ${:biasExplanation.text}
        
        =======================
    if: :biasExplanation.text
  
  # ======== 終了処理 ========
  # 終了条件を確認
  isExiting:
    agent: compareAgent
    inputs:
      array:
        - :checkExit.result
        - "=="
        - false
  
  # アプリ終了時のメッセージを表示
  exitMessage:
    agent: stringTemplateAgent
    console:
      after: true
    inputs:
      text: |
        CBT日記アプリを終了します。お疲れ様でした。
        日々の思考パターンを認識し、より健康的な考え方を身につけていく過程を続けてください。
    if: :isExiting.result